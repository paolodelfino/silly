{"version":3,"sources":["../src/index.ts","../../core/src/utils/api.ts","../../core/src/v3/account.ts","../../core/src/v3/authentication.ts","../../core/src/v3/certifications.ts","../../core/src/v3/changes.ts","../../core/src/v3/collections.ts","../../core/src/v3/companies.ts","../../core/src/v3/configuration.ts","../../core/src/v3/credits.ts","../../core/src/v3/discover.ts","../../core/src/v3/find.ts","../../core/src/v3/genres.ts","../../core/src/v3/guest-sessions.ts","../../core/src/v3/keywords.ts","../../core/src/v3/lists.ts","../../core/src/v3/movies.ts","../../core/src/v3/networks.ts","../../core/src/v3/people.ts","../../core/src/v3/reviews.ts","../../core/src/v3/search.ts","../../core/src/v3/trending.ts","../../core/src/v3/tv.ts","../../core/src/v3/tv-episode-groups.ts","../../core/src/v3/tv-episodes.ts","../../core/src/v3/tv-seasons.ts","../../core/src/v3/watch-providers.ts","../../core/src/utils/v4proxy.ts","../../core/src/v4/account.ts","../../core/src/v4/auth.ts","../../core/src/v4/list.ts","../../core/src/index.ts"],"sourcesContent":["import TMDBAPI, { Http, TMDBApiError, ITMDBAPI } from \"../../core\";\n\nexport * from \"../../core\";\n\nconst client: Http = {\n  get: async (url, accessToken) => {\n    const res = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n      },\n    });\n\n    if (!res.ok) {\n      const data = (await res.json()) as TMDBApiError;\n      throw new Error(data.status_message);\n    }\n    const data = await res.json();\n    return data;\n  },\n  post: async (url, body, accessToken) => {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!res.ok) {\n      const data = (await res.json()) as TMDBApiError;\n      throw new Error(data.status_message);\n    }\n    const data = await res.json();\n    return data;\n  },\n  put: async (url, body, accessToken) => {\n    const res = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!res.ok) {\n      const data = (await res.json()) as TMDBApiError;\n      throw new Error(data.status_message);\n    }\n    const data = await res.json();\n    return data;\n  },\n  delete: async (url, body, accessToken) => {\n    const res = await fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!res.ok) {\n      const data = (await res.json()) as TMDBApiError;\n      throw new Error(data.status_message);\n    }\n    const data = await res.json();\n    return data;\n  },\n};\n\nexport class TMDBWebAPI extends TMDBAPI implements ITMDBAPI {\n  constructor(apiKey: string, accessToken?: string) {\n    super(client, apiKey, accessToken);\n  }\n}\n","export const buildV3Url = <TParams>(apiKey: string, url: string, params?: TParams) => {\n  const searchParams = new URLSearchParams();\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        searchParams.append(key, value.join(\",\"));\n      } else {\n        searchParams.append(key, value as string);\n      }\n    }\n  }\n  const urlEndpoint = `${url}?api_key=${apiKey}${params ? `&${searchParams.toString()}` : \"\"}`;\n  return urlEndpoint;\n};\n\nexport const buildV4Url = <TParams>(url: string, params?: TParams) => {\n  const searchParams = new URLSearchParams();\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        searchParams.append(key, value.join(\",\"));\n      } else {\n        searchParams.append(key, value as string);\n      }\n    }\n  }\n  const urlEndpoint = `${url}${params ? `?${searchParams.toString()}` : \"\"}`;\n  return urlEndpoint;\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { AccountAddToWatchlistResponse } from \"../types/v3/account/add-to-watchlist\";\nimport { AccountGetCreatedListsResponse } from \"../types/v3/account/get-created-lists\";\nimport { AccountGetDetailsResponse } from \"../types/v3/account/get-details\";\nimport { AccountGetFavoriteMoviesResponse } from \"../types/v3/account/get-favorite-movies\";\nimport { AccountGetFavoriteTVShowsResponse } from \"../types/v3/account/get-favorite-tvshows\";\nimport { AccountGetMovieWatchlistResponse } from \"../types/v3/account/get-movie-watchlist\";\nimport { AccountGetRatedMoviesResponse } from \"../types/v3/account/get-rated-movies\";\nimport { AccountGetRatedTVEpisodesResponse } from \"../types/v3/account/get-rated-tvepisodes\";\nimport { AccountGetRatedTVShowsResponse } from \"../types/v3/account/get-rated-tvshows\";\nimport { AccountGetTVShowWatchlistResponse } from \"../types/v3/account/get-tvshow-watchlist\";\nimport { AccountMarkAsFavoriteResponse } from \"../types/v3/account/mark-as-favorite\";\nimport { buildV3Url } from \"../utils/api\";\n\nconst getAccountUrlWithId = (url: string, account_id?: number): string => {\n  let formattedUrl = url;\n\n  if (account_id) {\n    formattedUrl = formattedUrl.replace(\"{account_id}\", account_id.toString());\n  } else {\n    formattedUrl = formattedUrl.replace(\"/{account_id}\", \"\");\n  }\n\n  return formattedUrl;\n};\n\nexport const createV3AccountMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"account\"] => {\n  return {\n    getDetails: async (params) => {\n      const res = await client.get<AccountGetDetailsResponse>(buildV3Url(apiKey, `${apiUrl}account`, params));\n      return res;\n    },\n    getCreatedLists: async (params, accountId) => {\n      const res = await client.get<AccountGetCreatedListsResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/lists`, accountId), params));\n\n      return res;\n    },\n    getFavoriteMovies: async (params, accountId) => {\n      const res = await client.get<AccountGetFavoriteMoviesResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite/movies`, accountId), params));\n\n      return res;\n    },\n    getFavoriteTVShows: async (params, accountId) => {\n      const res = await client.get<AccountGetFavoriteTVShowsResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite/tv`, accountId), params));\n\n      return res;\n    },\n    markAsFavorite: async (params, body, accountId) => {\n      const res = await client.post<AccountMarkAsFavoriteResponse, typeof body>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite`, accountId), params), body);\n\n      return res;\n    },\n    getRatedMovies: async (params, accountId) => {\n      const res = await client.get<AccountGetRatedMoviesResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/movies`, accountId), params));\n\n      return res;\n    },\n    getRatedTVShows: async (params, accountId) => {\n      const res = await client.get<AccountGetRatedTVShowsResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/tv`, accountId), params));\n\n      return res;\n    },\n    getRatedTVEpisodes: async (params, accountId) => {\n      const res = await client.get<AccountGetRatedTVEpisodesResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/tv/episodes`, accountId), params));\n\n      return res;\n    },\n    getMovieWatchlist: async (params, accountId) => {\n      const res = await client.get<AccountGetMovieWatchlistResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist/movies`, accountId), params));\n\n      return res;\n    },\n\n    getTVShowWatchlist: async (params, accountId) => {\n      const res = await client.get<AccountGetTVShowWatchlistResponse>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist/tv`, accountId), params));\n\n      return res;\n    },\n    addToWatchlist: async (params, body, accountId) => {\n      const res = await client.post<AccountAddToWatchlistResponse, typeof body>(buildV3Url(apiKey, getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist`, accountId), params), body);\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport {\n  AuthenticationCreateGuestSessionResponse,\n  AuthenticationCreateRequestTokenResponse,\n  AuthenticationCreateSessionResponse,\n  AuthenticationCreateSessionWithLoginResponse,\n  AuthenticationCreateSessionFromV4AccessTokenResponse,\n  AuthenticationDeleteSessionResponse,\n} from \"../types/v3/authentication\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3AuthenticationMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"authentication\"] => {\n  return {\n    createGuestSession: async () => {\n      const res = await client.get<AuthenticationCreateGuestSessionResponse>(buildV3Url(apiKey, `${apiUrl}authentication/guest_session/new`));\n\n      return res;\n    },\n    createRequestToken: async () => {\n      const res = await client.get<AuthenticationCreateRequestTokenResponse>(buildV3Url(apiKey, `${apiUrl}authentication/token/new`));\n      return res;\n    },\n    createSession: async (body) => {\n      const res = await client.post<AuthenticationCreateSessionResponse, typeof body>(buildV3Url(apiKey, `${apiUrl}authentication/session/new`), body);\n\n      return res;\n    },\n    createSessionWithLogin: async (body) => {\n      const res = await client.post<AuthenticationCreateSessionWithLoginResponse, typeof body>(buildV3Url(apiKey, `${apiUrl}authentication/token/validate_with_login`), body);\n\n      return res;\n    },\n    createSessionFromV4AccessToken: async (body) => {\n      const res = await client.post<AuthenticationCreateSessionFromV4AccessTokenResponse, typeof body>(buildV3Url(apiKey, `${apiUrl}authentication/session/convert/4`), body);\n\n      return res;\n    },\n    deleteSession: async (body) => {\n      const res = await client.delete<AuthenticationDeleteSessionResponse, typeof body>(buildV3Url(apiKey, `${apiUrl}authentication/session`), body);\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { CertificationsGetMovieCertificationResponse, CertificationsGetTVCertificationResponse } from \"../types/v3/certifications\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CertificationsMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"certifications\"] => {\n  return {\n    getMovieCertifications: async () => {\n      const res = await client.get<CertificationsGetMovieCertificationResponse>(buildV3Url(apiKey, `${apiUrl}certification/movie/list`));\n\n      return res;\n    },\n    getTVShowCertifications: async () => {\n      const res = await client.get<CertificationsGetTVCertificationResponse>(buildV3Url(apiKey, `${apiUrl}certification/tv/list`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { ChangesGetMovieChangeListResponse } from \"../types/v3/changes/get-movie-change-list\";\nimport { ChangesGetPersonChangeListResponse } from \"../types/v3/changes/get-person-change-list\";\nimport { ChangesGetTVChangeListResponse } from \"../types/v3/changes/get-tv-change-list\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ChangesMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"changes\"] => {\n  return {\n    getMovieChangeList: async (params) => {\n      const res = await client.get<ChangesGetMovieChangeListResponse>(buildV3Url(apiKey, `${apiUrl}movie/changes`, params));\n\n      return res;\n    },\n    getTVChangeList: async (params) => {\n      const res = await client.get<ChangesGetTVChangeListResponse>(buildV3Url(apiKey, `${apiUrl}tv/changes`, params));\n\n      return res;\n    },\n    getPersonChangeList: async (params) => {\n      const res = await client.get<ChangesGetPersonChangeListResponse>(buildV3Url(apiKey, `${apiUrl}person/changes`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { CollectionsGetDetailsResponse } from \"../types/v3/collections/get-details\";\nimport { CollectionsGetImagesResponse } from \"../types/v3/collections/get-images\";\nimport { CollectionsGetTranslationsResponse } from \"../types/v3/collections/get-translations\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CollectionsMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"collections\"] => {\n  return {\n    getDetails: async (collectionId, params) => {\n      const res = await client.get<CollectionsGetDetailsResponse>(buildV3Url(apiKey, `${apiUrl}collection/${collectionId}`, params));\n\n      return res;\n    },\n    getImages: async (collectionId, params) => {\n      const res = await client.get<CollectionsGetImagesResponse>(buildV3Url(apiKey, `${apiUrl}collection/${collectionId}/images`, params));\n\n      return res;\n    },\n    getTranslations: async (collectionId, params) => {\n      const res = await client.get<CollectionsGetTranslationsResponse>(buildV3Url(apiKey, `${apiUrl}collection/${collectionId}/translations`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { CompaniesGetAlternativeNamesResponse } from \"../types/v3/companies/get-alternative-names\";\nimport { CompaniesGetDetailsResponse } from \"../types/v3/companies/get-details\";\nimport { CompaniesGetImagesResponse } from \"../types/v3/companies/get-images\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CompaniesMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"companies\"] => {\n  return {\n    getDetails: async (companyId) => {\n      const res = await client.get<CompaniesGetDetailsResponse>(buildV3Url(apiKey, `${apiUrl}company/${companyId}`));\n\n      return res;\n    },\n    getAlternativeNames: async (companyId) => {\n      const res = await client.get<CompaniesGetAlternativeNamesResponse>(buildV3Url(apiKey, `${apiUrl}company/${companyId}/alternative_names`));\n\n      return res;\n    },\n    getImages: async (companyId) => {\n      const res = await client.get<CompaniesGetImagesResponse>(buildV3Url(apiKey, `${apiUrl}company/${companyId}/images`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { ConfigurationGetApiConfigurationResponse } from \"../types/v3/configuration/get-api-configuration\";\nimport { ConfigurationGetCountriesResponse } from \"../types/v3/configuration/get-countries\";\nimport { ConfigurationGetJobsResponse } from \"../types/v3/configuration/get-jobs\";\nimport { ConfigurationGetLanguagesResponse } from \"../types/v3/configuration/get-languages\";\nimport { ConfigurationGetPrimaryTranslationsResponse } from \"../types/v3/configuration/get-primary-translations\";\nimport { ConfigurationGetTimezonesResponse } from \"../types/v3/configuration/get-timezones\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ConfigurationMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"configuration\"] => {\n  return {\n    getAPIConfiguration: async () => {\n      const res = await client.get<ConfigurationGetApiConfigurationResponse>(buildV3Url(apiKey, `${apiUrl}configuration`));\n\n      return res;\n    },\n    getCountries: async () => {\n      const res = await client.get<ConfigurationGetCountriesResponse>(buildV3Url(apiKey, `${apiUrl}configuration/countries`));\n\n      return res;\n    },\n    getJobs: async () => {\n      const res = await client.get<ConfigurationGetJobsResponse>(buildV3Url(apiKey, `${apiUrl}configuration/jobs`));\n\n      return res;\n    },\n    getLanguages: async () => {\n      const res = await client.get<ConfigurationGetLanguagesResponse>(buildV3Url(apiKey, `${apiUrl}configuration/languages`));\n\n      return res;\n    },\n    getPrimaryTranslations: async () => {\n      const res = await client.get<ConfigurationGetPrimaryTranslationsResponse>(buildV3Url(apiKey, `${apiUrl}configuration/primary_translations`));\n\n      return res;\n    },\n    getTimezones: async () => {\n      const res = await client.get<ConfigurationGetTimezonesResponse>(buildV3Url(apiKey, `${apiUrl}configuration/timezones`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { CreditsGetDetailsResponse } from \"../types/v3/credits/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CreditsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"credits\"] => {\n  return {\n    getDetails: async (creditId: string) => {\n      const res = await client.get<CreditsGetDetailsResponse>(buildV3Url(apiKey, `${url}credit/${creditId}`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { DiscoverMovieDiscoverResponse } from \"../types/v3/discover/movie-discover\";\nimport { DiscoverTVDiscoverResponse } from \"../types/v3/discover/tv-discover\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3DiscoverMethods = (client: Http, apiKey: string, apiUrl: string): ITMDBAPI[\"v3\"][\"discover\"] => {\n  return {\n    movieDiscover: async (params) => {\n      const res = await client.get<DiscoverMovieDiscoverResponse>(buildV3Url(apiKey, `${apiUrl}discover/movie`, params));\n\n      return res;\n    },\n    tvDiscover: async (params) => {\n      const res = await client.get<DiscoverTVDiscoverResponse>(buildV3Url(apiKey, `${apiUrl}discover/tv`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { FindFindByIdResponse } from \"../types/v3/find/find-by-id\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3FindMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"find\"] => {\n  return {\n    findById: async (externalId: string, params) => {\n      const res = await client.get<FindFindByIdResponse>(buildV3Url(apiKey, `${url}find/${externalId}`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { GenresGetMovieListResponse } from \"../types/v3/genres/get-movie-list\";\nimport { GenresGetTVListResponse } from \"../types/v3/genres/get-tv-list\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3GenresMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"genres\"] => {\n  return {\n    getMovieList: async (params) => {\n      const res = await client.get<GenresGetMovieListResponse>(buildV3Url(apiKey, `${url}genre/movie/list`, params));\n\n      return res;\n    },\n    getTVList: async (params) => {\n      const res = await client.get<GenresGetTVListResponse>(buildV3Url(apiKey, `${url}genre/tv/list`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { GuestSessionsGetRatedMoviesResponse } from \"../types/v3/guest-sessions/get-rated-movies\";\nimport { GuestSessionsGetRatedTVEpisodesResponse } from \"../types/v3/guest-sessions/get-rated-tvepisodes\";\nimport { GuestSessionsGetRatedTVShowsResponse } from \"../types/v3/guest-sessions/get-rated-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3GuestSessionsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"guestSessions\"] => {\n  return {\n    getRatedMovies: async (guestSessionId: string, params) => {\n      const res = await client.get<GuestSessionsGetRatedMoviesResponse>(buildV3Url(apiKey, `${url}guest_session/${guestSessionId}/rated/movies`, params));\n\n      return res;\n    },\n    getRatedTVShows: async (guestSessionId: string, params) => {\n      const res = await client.get<GuestSessionsGetRatedTVShowsResponse>(buildV3Url(apiKey, `${url}guest_session/${guestSessionId}/rated/tv`, params));\n\n      return res;\n    },\n    getRatedTVEpisodes: async (guestSessionId: string, params) => {\n      const res = await client.get<GuestSessionsGetRatedTVEpisodesResponse>(buildV3Url(apiKey, `${url}guest_session/${guestSessionId}/rated/tv/episodes`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { KeywordsGetDetailsResponse } from \"../types/v3/keywords/get-details\";\nimport { KeywordsGetMoviesResponse } from \"../types/v3/keywords/get-movies\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3KeywordsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"keywords\"] => {\n  return {\n    getDetails: async (keywordId) => {\n      const res = await client.get<KeywordsGetDetailsResponse>(buildV3Url(apiKey, `${url}keyword/${keywordId}`));\n\n      return res;\n    },\n    getMovies: async (keywordId, params) => {\n      const res = await client.get<KeywordsGetMoviesResponse>(buildV3Url(apiKey, `${url}keyword/${keywordId}/movies`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { ListsAddMovieResponse } from \"../types/v3/lists/add-movie\";\nimport { ListsCheckItemStatusResponse } from \"../types/v3/lists/check-item-status\";\nimport { ListsClearListResponse } from \"../types/v3/lists/clear-list\";\nimport { ListsCreateListResponse } from \"../types/v3/lists/create-list\";\nimport { ListsDeleteListResponse } from \"../types/v3/lists/delete-list\";\nimport { ListsGetDetailsResponse } from \"../types/v3/lists/get-details\";\nimport { ListsRemoveMovieResponse } from \"../types/v3/lists/remove-movie\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ListsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"lists\"] => {\n  return {\n    getDetails: async (listId, params) => {\n      const res = await client.get<ListsGetDetailsResponse>(buildV3Url(apiKey, `${url}list/${listId}`, params));\n\n      return res;\n    },\n    checkItemStatus: async (listId, params) => {\n      const res = await client.get<ListsCheckItemStatusResponse>(buildV3Url(apiKey, `${url}list/${listId}/item_status`, params));\n\n      return res;\n    },\n    createList: async (body, params) => {\n      const res = await client.post<ListsCreateListResponse, typeof body>(buildV3Url(apiKey, `${url}list`, params), body);\n\n      return res;\n    },\n    addMovie: async (listId, body, params) => {\n      const res = await client.post<ListsAddMovieResponse, typeof body>(buildV3Url(apiKey, `${url}list/${listId}/add_item`, params), body);\n\n      return res;\n    },\n    removeMovie: async (listId, body, params) => {\n      const res = await client.post<ListsRemoveMovieResponse, typeof body>(buildV3Url(apiKey, `${url}list/${listId}/remove_item`, params), body);\n\n      return res;\n    },\n    clearList: async (listId, params) => {\n      const res = await client.post<ListsClearListResponse>(buildV3Url(apiKey, `${url}list/${listId}/clear`, params));\n\n      return res;\n    },\n    deleteList: async (listId, params) => {\n      const res = await client.delete<ListsDeleteListResponse>(buildV3Url(apiKey, `${url}list/${listId}`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { MoviesAppendToResponse } from \"../types/append-to-response\";\nimport { MoviesDeleteRatingResponse } from \"../types/v3/movies/delete-rating\";\nimport { MoviesGetAccountStatesResponse } from \"../types/v3/movies/get-account-states\";\nimport { MoviesGetAlternativeTitlesResponse } from \"../types/v3/movies/get-alternative-titles\";\nimport { MoviesGetChangesResponse } from \"../types/v3/movies/get-changes\";\nimport { MoviesGetCreditsResponse } from \"../types/v3/movies/get-credits\";\nimport { GetDetailsResponse, MoviesGetDetailsParams } from \"../types/v3/movies/get-details\";\nimport { MoviesGetExternalIdsResponse } from \"../types/v3/movies/get-external-ids\";\nimport { MoviesGetImagesResponse } from \"../types/v3/movies/get-images\";\nimport { MoviesGetKeywordsResponse } from \"../types/v3/movies/get-keywords\";\nimport { MoviesGetLatestResponse } from \"../types/v3/movies/get-latest\";\nimport { MoviesGetListsResponse } from \"../types/v3/movies/get-lists\";\nimport { MoviesGetNowPlayingResponse } from \"../types/v3/movies/get-now-playing\";\nimport { MoviesGetPopularResponse } from \"../types/v3/movies/get-popular\";\nimport { MoviesGetRecommendationsResponse } from \"../types/v3/movies/get-recommendations\";\nimport { MoviesGetReleaseDatesResponse } from \"../types/v3/movies/get-release-dates\";\nimport { MoviesGetReviewsResponse } from \"../types/v3/movies/get-reviews\";\nimport { MoviesGetSimilarMoviesResponse } from \"../types/v3/movies/get-similar-movies\";\nimport { MoviesGetTopRatedResponse } from \"../types/v3/movies/get-top-rated\";\nimport { MoviesGetTranslationsResponse } from \"../types/v3/movies/get-translations\";\nimport { MoviesGetUpcomingResponse } from \"../types/v3/movies/get-upcoming\";\nimport { MoviesGetVideosResponse } from \"../types/v3/movies/get-videos\";\nimport { MoviesGetWatchProvidersResponse } from \"../types/v3/movies/get-watch-providers\";\nimport { MoviesRateMovieResponse } from \"../types/v3/movies/rate-movie\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3MoviesMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"movies\"] => {\n  return {\n    getDetails: async <T extends MoviesAppendToResponse[]>(movieId: number, params?: MoviesGetDetailsParams<T>) => {\n      const res = await client.get<GetDetailsResponse<T>>(buildV3Url(apiKey, `${url}movie/${movieId}`, params));\n\n      return res;\n    },\n    getAccountStates: async (movieId, params) => {\n      const res = await client.get<MoviesGetAccountStatesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/account_states`, params));\n\n      return res;\n    },\n    getAlternativeTitles: async (movieId, params) => {\n      const res = await client.get<MoviesGetAlternativeTitlesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/alternative_titles`, params));\n\n      return res;\n    },\n    getChanges: async (movieId, params) => {\n      const res = await client.get<MoviesGetChangesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/changes`, params));\n\n      return res;\n    },\n    getCredits: async (movieId, params) => {\n      const res = await client.get<MoviesGetCreditsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/credits`, params));\n\n      return res;\n    },\n    getExternalIds: async (movieId) => {\n      const res = await client.get<MoviesGetExternalIdsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/external_ids`));\n\n      return res;\n    },\n    getImages: async (movieId, params) => {\n      const res = await client.get<MoviesGetImagesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/images`, params));\n\n      return res;\n    },\n    getKeywords: async (movieId) => {\n      const res = await client.get<MoviesGetKeywordsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/keywords`));\n\n      return res;\n    },\n    getLists: async (movieId, params) => {\n      const res = await client.get<MoviesGetListsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/lists`, params));\n\n      return res;\n    },\n    getRecommendations: async (movieId, params) => {\n      const res = await client.get<MoviesGetRecommendationsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/recommendations`, params));\n\n      return res;\n    },\n    getReleaseDates: async (movieId) => {\n      const res = await client.get<MoviesGetReleaseDatesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/release_dates`));\n\n      return res;\n    },\n    getReviews: async (movieId, params) => {\n      const res = await client.get<MoviesGetReviewsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/reviews`, params));\n\n      return res;\n    },\n    getSimilarMovies: async (movieId, params) => {\n      const res = await client.get<MoviesGetSimilarMoviesResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/similar`, params));\n\n      return res;\n    },\n    getTranslations: async (movieId) => {\n      const res = await client.get<MoviesGetTranslationsResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/translations`));\n\n      return res;\n    },\n    getVideos: async (movieId, params) => {\n      const res = await client.get<MoviesGetVideosResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/videos`, params));\n\n      return res;\n    },\n    getWatchProviders: async (movieId) => {\n      const res = await client.get<MoviesGetWatchProvidersResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/watch/providers`));\n\n      return res;\n    },\n    rateMovie: async (movieId, body, params) => {\n      const res = await client.post<MoviesRateMovieResponse, typeof body>(buildV3Url(apiKey, `${url}movie/${movieId}/rating`, params), body);\n\n      return res;\n    },\n    deleteRating: async (movieId, params) => {\n      const res = await client.delete<MoviesDeleteRatingResponse>(buildV3Url(apiKey, `${url}movie/${movieId}/rating`, params));\n\n      return res;\n    },\n    getLatest: async () => {\n      const res = await client.get<MoviesGetLatestResponse>(buildV3Url(apiKey, `${url}movie/latest`));\n\n      return res;\n    },\n    getNowPlaying: async (params) => {\n      const res = await client.get<MoviesGetNowPlayingResponse>(buildV3Url(apiKey, `${url}movie/now_playing`, params));\n\n      return res;\n    },\n    getPopular: async (params) => {\n      const res = await client.get<MoviesGetPopularResponse>(buildV3Url(apiKey, `${url}movie/popular`, params));\n\n      return res;\n    },\n    getTopRated: async (params) => {\n      const res = await client.get<MoviesGetTopRatedResponse>(buildV3Url(apiKey, `${url}movie/top_rated`, params));\n\n      return res;\n    },\n    getUpcoming: async (params) => {\n      const res = await client.get<MoviesGetUpcomingResponse>(buildV3Url(apiKey, `${url}movie/upcoming`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { NetworksGetAlternativeNamesResponse } from \"../types/v3/networks/get-alternative-names\";\nimport { NetworksGetDetailsResponse } from \"../types/v3/networks/get-details\";\nimport { NetworksGetImagesResponse } from \"../types/v3/networks/get-images\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3NetworksMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"networks\"] => {\n  return {\n    getDetails: async (networkId: number) => {\n      const res = await client.get<NetworksGetDetailsResponse>(buildV3Url(apiKey, `${url}network/${networkId}`));\n\n      return res;\n    },\n    getAlternativeNames: async (networkId: number) => {\n      const res = await client.get<NetworksGetAlternativeNamesResponse>(buildV3Url(apiKey, `${url}network/${networkId}/alternative_names`));\n\n      return res;\n    },\n    getImages: async (networkId: number) => {\n      const res = await client.get<NetworksGetImagesResponse>(buildV3Url(apiKey, `${url}network/${networkId}/images`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { PeopleGetChangesResponse } from \"../types/v3/people/get-changes\";\nimport { PeopleGetCombinedCreditsResponse } from \"../types/v3/people/get-combined-credits\";\nimport { PeopleGetDetailsResponse } from \"../types/v3/people/get-details\";\nimport { PeopleGetExternalIdsResponse } from \"../types/v3/people/get-external-ids\";\nimport { PeopleGetImagesResponse } from \"../types/v3/people/get-images\";\nimport { PeopleGetLatestResponse } from \"../types/v3/people/get-latest\";\nimport { PeopleGetMovieCreditsResponse } from \"../types/v3/people/get-movie-credits\";\nimport { PeopleGetPopularResponse } from \"../types/v3/people/get-popular\";\nimport { PeopleGetTaggedImagesResponse } from \"../types/v3/people/get-tagged-images\";\nimport { PeopleGetTranslationsResponse } from \"../types/v3/people/get-translations\";\nimport { PeopleGetTvCreditsResponse } from \"../types/v3/people/get-tv-credits\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3PeopleMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"people\"] => {\n  return {\n    getDetails: async (personId, params) => {\n      const res = await client.get<PeopleGetDetailsResponse>(buildV3Url(apiKey, `${url}person/${personId}`, params));\n\n      return res;\n    },\n    getChanges: async (personId, params) => {\n      const res = await client.get<PeopleGetChangesResponse>(buildV3Url(apiKey, `${url}person/${personId}/changes`, params));\n\n      return res;\n    },\n    getMovieCredits: async (personId, params) => {\n      const res = await client.get<PeopleGetMovieCreditsResponse>(buildV3Url(apiKey, `${url}person/${personId}/movie_credits`, params));\n\n      return res;\n    },\n    getTVCredits: async (personId, params) => {\n      const res = await client.get<PeopleGetTvCreditsResponse>(buildV3Url(apiKey, `${url}person/${personId}/tv_credits`, params));\n\n      return res;\n    },\n    getCombinedCredits: async (personId, params) => {\n      const res = await client.get<PeopleGetCombinedCreditsResponse>(buildV3Url(apiKey, `${url}person/${personId}/combined_credits`, params));\n\n      return res;\n    },\n    getExternalIds: async (personId) => {\n      const res = await client.get<PeopleGetExternalIdsResponse>(buildV3Url(apiKey, `${url}person/${personId}/external_ids`));\n\n      return res;\n    },\n    getImages: async (personId) => {\n      const res = await client.get<PeopleGetImagesResponse>(buildV3Url(apiKey, `${url}person/${personId}/images`));\n\n      return res;\n    },\n    getTaggedImages: async (personId, params) => {\n      const res = await client.get<PeopleGetTaggedImagesResponse>(buildV3Url(apiKey, `${url}person/${personId}/tagged_images`, params));\n\n      return res;\n    },\n    getTranslations: async (personId, params) => {\n      const res = await client.get<PeopleGetTranslationsResponse>(buildV3Url(apiKey, `${url}person/${personId}/translations`, params));\n\n      return res;\n    },\n    getLatest: async (params) => {\n      const res = await client.get<PeopleGetLatestResponse>(buildV3Url(apiKey, `${url}person/latest`, params));\n\n      return res;\n    },\n    getPopular: async (params) => {\n      const res = await client.get<PeopleGetPopularResponse>(buildV3Url(apiKey, `${url}person/popular`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { ReviewsGetDetailsResponse } from \"../types/v3/reviews/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ReviewsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"reviews\"] => {\n  return {\n    getDetails: async (reviewId: string) => {\n      const res = await client.get<ReviewsGetDetailsResponse>(buildV3Url(apiKey, `${url}review/${reviewId}`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { SearchMultiSearchResponse } from \"../types/v3/search/multi-search\";\nimport { SearchCollectionsResponse } from \"../types/v3/search/search-collections\";\nimport { SearchCompaniesResponse } from \"../types/v3/search/search-companies\";\nimport { SearchKeywordsResponse } from \"../types/v3/search/search-keywords\";\nimport { SearchMoviesResponse } from \"../types/v3/search/search-movies\";\nimport { SearchPeopleResponse } from \"../types/v3/search/search-people\";\nimport { SearchTVShowsResponse } from \"../types/v3/search/search-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3SearchMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"search\"] => {\n  return {\n    searchCompanies: async (params) => {\n      const res = await client.get<SearchCompaniesResponse>(buildV3Url(apiKey, `${url}search/company`, params));\n\n      return res;\n    },\n    searchCollections: async (params) => {\n      const res = await client.get<SearchCollectionsResponse>(buildV3Url(apiKey, `${url}search/collection`, params));\n\n      return res;\n    },\n    searchKeywords: async (params) => {\n      const res = await client.get<SearchKeywordsResponse>(buildV3Url(apiKey, `${url}search/keyword`, params));\n\n      return res;\n    },\n    searchMovies: async (params) => {\n      const res = await client.get<SearchMoviesResponse>(buildV3Url(apiKey, `${url}search/movie`, params));\n\n      return res;\n    },\n    searchMulti: async (params) => {\n      const res = await client.get<SearchMultiSearchResponse>(buildV3Url(apiKey, `${url}search/multi`, params));\n\n      return res;\n    },\n    searchPeople: async (params) => {\n      const res = await client.get<SearchPeopleResponse>(buildV3Url(apiKey, `${url}search/person`, params));\n\n      return res;\n    },\n    searchTV: async (params) => {\n      const res = await client.get<SearchTVShowsResponse>(buildV3Url(apiKey, `${url}search/tv`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { TrendingGetTrendingResponse } from \"../types/v3/trending/get-trending\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TrendingMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"trending\"] => {\n  return {\n    getTrending: async (mediaType, timeWindow) => {\n      const res = await client.get<TrendingGetTrendingResponse>(buildV3Url(apiKey, `${url}trending/${mediaType}/${timeWindow}`));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { TVDeleteRatingResponse } from \"../types/v3/tv/delete-rating\";\nimport { TVGetAccountStatesResponse } from \"../types/v3/tv/get-account-states\";\nimport { TVGetAggregateCreditsResponse } from \"../types/v3/tv/get-aggregate-credits\";\nimport { TVGetAlternativeTitlesResponse } from \"../types/v3/tv/get-alternative-titles\";\nimport { TVGetChangesResponse } from \"../types/v3/tv/get-changes\";\nimport { TVGetContentRatingsResponse } from \"../types/v3/tv/get-content-ratings\";\nimport { TVGetCreditsResponse } from \"../types/v3/tv/get-credits\";\nimport { TVGetDetailsResponse } from \"../types/v3/tv/get-details\";\nimport { TVGetEpisodeGroupsResponse } from \"../types/v3/tv/get-episode-groups\";\nimport { TVGetExternalIdsResponse } from \"../types/v3/tv/get-external-ids\";\nimport { TVGetImagesResponse } from \"../types/v3/tv/get-images\";\nimport { TVGetKeywordsResponse } from \"../types/v3/tv/get-keywords\";\nimport { TVGetLatestResponse } from \"../types/v3/tv/get-latest\";\nimport { TVGetPopularResponse } from \"../types/v3/tv/get-popular\";\nimport { TVGetRecommendationsResponse } from \"../types/v3/tv/get-recommendations\";\nimport { TVGetReviewsResponse } from \"../types/v3/tv/get-reviews\";\nimport { TVGetScreenedTheatricallyResponse } from \"../types/v3/tv/get-screened-theatrically\";\nimport { TVGetSimilarTVShowsResponse } from \"../types/v3/tv/get-similar-tvshows\";\nimport { TVGetTopRatedResponse } from \"../types/v3/tv/get-top-rated\";\nimport { TVGetTranslationsResponse } from \"../types/v3/tv/get-translations\";\nimport { TVGetTVAiringTodayResponse } from \"../types/v3/tv/get-tv-airing-today\";\nimport { TVGetTVOnTheAirResponse } from \"../types/v3/tv/get-tv-on-the-air\";\nimport { TVGetVideosResponse } from \"../types/v3/tv/get-videos\";\nimport { TVGetWatchProvidersResponse } from \"../types/v3/tv/get-watch-providers\";\nimport { TVRateTVShowsResponse } from \"../types/v3/tv/rate-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TvMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"tv\"] => {\n  return {\n    getDetails: async (tvId, params) => {\n      const res = await client.get<TVGetDetailsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}`, params));\n\n      return res;\n    },\n    getAccountStates: async (tvId, params) => {\n      const res = await client.get<TVGetAccountStatesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/account_states`, params));\n\n      return res;\n    },\n    getAggregateCredits: async (tvId, params) => {\n      const res = await client.get<TVGetAggregateCreditsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/aggregate_credits`, params));\n\n      return res;\n    },\n    getAlternativeTitles: async (tvId, params) => {\n      const res = await client.get<TVGetAlternativeTitlesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/alternative_titles`, params));\n\n      return res;\n    },\n    getChanges: async (tvId, params) => {\n      const res = await client.get<TVGetChangesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/changes`, params));\n\n      return res;\n    },\n    getContentRatings: async (tvId, params) => {\n      const res = await client.get<TVGetContentRatingsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/content_ratings`, params));\n\n      return res;\n    },\n    getCredits: async (tvId, params) => {\n      const res = await client.get<TVGetCreditsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/credits`, params));\n\n      return res;\n    },\n    getEpisodeGroups: async (tvId, params) => {\n      const res = await client.get<TVGetEpisodeGroupsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/episode_groups`, params));\n\n      return res;\n    },\n    getExternalIds: async (tvId, params) => {\n      const res = await client.get<TVGetExternalIdsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/external_ids`, params));\n\n      return res;\n    },\n    getImages: async (tvId, params) => {\n      const res = await client.get<TVGetImagesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/images`, params));\n\n      return res;\n    },\n    getKeywords: async (tvId) => {\n      const res = await client.get<TVGetKeywordsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/keywords`));\n\n      return res;\n    },\n    getRecommendations: async (tvId, params) => {\n      const res = await client.get<TVGetRecommendationsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/recommendations`, params));\n\n      return res;\n    },\n    getReviews: async (tvId, params) => {\n      const res = await client.get<TVGetReviewsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/reviews`, params));\n\n      return res;\n    },\n    getScreenedTheatrically: async (tvId, params) => {\n      const res = await client.get<TVGetScreenedTheatricallyResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/screened_theatrically`, params));\n\n      return res;\n    },\n    getSimilarTVShows: async (tvId, params) => {\n      const res = await client.get<TVGetSimilarTVShowsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/similar`, params));\n\n      return res;\n    },\n    getTranslations: async (tvId) => {\n      const res = await client.get<TVGetTranslationsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/translations`));\n\n      return res;\n    },\n    getVideos: async (tvId, params) => {\n      const res = await client.get<TVGetVideosResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/videos`, params));\n\n      return res;\n    },\n    getWatchProviders: async (tvId) => {\n      const res = await client.get<TVGetWatchProvidersResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/watch/providers`));\n\n      return res;\n    },\n    rateTVShow: async (tvId, body, params) => {\n      const res = await client.post<TVRateTVShowsResponse, typeof body>(buildV3Url(apiKey, `${url}tv/${tvId}/rating`, params), body);\n\n      return res;\n    },\n    deleteRating: async (tvId, params) => {\n      const res = await client.delete<TVDeleteRatingResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/rating`, params));\n\n      return res;\n    },\n    getLatest: async (params) => {\n      const res = await client.get<TVGetLatestResponse>(buildV3Url(apiKey, `${url}tv/latest`, params));\n\n      return res;\n    },\n    getTVAiringToday: async (params) => {\n      const res = await client.get<TVGetTVAiringTodayResponse>(buildV3Url(apiKey, `${url}tv/airing_today`, params));\n\n      return res;\n    },\n    getTVOnTheAir: async (params) => {\n      const res = await client.get<TVGetTVOnTheAirResponse>(buildV3Url(apiKey, `${url}tv/on_the_air`, params));\n\n      return res;\n    },\n    getPopular: async (params) => {\n      const res = await client.get<TVGetPopularResponse>(buildV3Url(apiKey, `${url}tv/popular`, params));\n\n      return res;\n    },\n    getTopRated: async (params) => {\n      const res = await client.get<TVGetTopRatedResponse>(buildV3Url(apiKey, `${url}tv/top_rated`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { TVEpisodeGroupsGetDetailsResponse } from \"../types/v3/tv-episode-groups/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVEpisodeGroupsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"tvEpisodeGroups\"] => {\n  return {\n    getDetails: async (params, id) => {\n      const res = await client.get<TVEpisodeGroupsGetDetailsResponse>(buildV3Url(apiKey, `${url}tv-episode-group/${id}`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { TVEpisodesDeleteRatingResponse } from \"../types/v3/tv-episodes/delete-rating\";\nimport { TVEpisodesGetAccountStatesResponse } from \"../types/v3/tv-episodes/get-account-states\";\nimport { TVEpisodesGetChangesResponse } from \"../types/v3/tv-episodes/get-changes\";\nimport { TVEpisodesGetCreditsResponse } from \"../types/v3/tv-episodes/get-credits\";\nimport { TVEpisodesGetDetailsResponse } from \"../types/v3/tv-episodes/get-details\";\nimport { TVEpisodesGetImagesResponse } from \"../types/v3/tv-episodes/get-images\";\nimport { TVEpisodesGetTranslationsResponse } from \"../types/v3/tv-episodes/get-translations\";\nimport { TVEpisodesGetVideosResponse } from \"../types/v3/tv-episodes/get-videos\";\nimport { TVEpisodesRateTVEpisodeResponse } from \"../types/v3/tv-episodes/rate-tv-episode\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVEpisodesMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"tvEpisodes\"] => {\n  return {\n    getDetails: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.get<TVEpisodesGetDetailsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}`, params));\n\n      return res;\n    },\n    getAccountStates: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.get<TVEpisodesGetAccountStatesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/account_states`, params));\n\n      return res;\n    },\n    getChanges: async (episodeId, params) => {\n      const res = await client.get<TVEpisodesGetChangesResponse>(buildV3Url(apiKey, `${url}tv/episode/${episodeId}/changes`, params));\n\n      return res;\n    },\n    getCredits: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.get<TVEpisodesGetCreditsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/credits`, params));\n\n      return res;\n    },\n    getExternalIds: async (tvId, seasonNumber, episodeNumber) => {\n      const res = await client.get<TVEpisodesGetDetailsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/external_ids`));\n\n      return res;\n    },\n    getImages: async (tvId, seasonNumber, episodeNumber) => {\n      const res = await client.get<TVEpisodesGetImagesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/images`));\n\n      return res;\n    },\n    getTranslations: async (tvId, seasonNumber, episodeNumber) => {\n      const res = await client.get<TVEpisodesGetTranslationsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/translations`));\n\n      return res;\n    },\n    rateTVEpisode: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.post<TVEpisodesRateTVEpisodeResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`, params));\n\n      return res;\n    },\n    deleteRating: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.delete<TVEpisodesDeleteRatingResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`, params));\n\n      return res;\n    },\n    getVideos: async (tvId, seasonNumber, episodeNumber, params) => {\n      const res = await client.get<TVEpisodesGetVideosResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/videos`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { TVSeasonsGetAccountStatesResponse } from \"../types/v3/tv-seasons/get-account-states\";\nimport { TVSeasonsGetAggregateCreditsResponse } from \"../types/v3/tv-seasons/get-aggregate-credits\";\nimport { TVSeasonsGetChangesResponse } from \"../types/v3/tv-seasons/get-changes\";\nimport { TVSeasonsGetCreditsResponse } from \"../types/v3/tv-seasons/get-credits\";\nimport { TVSeasonsGetDetailsResponse } from \"../types/v3/tv-seasons/get-details\";\nimport { TVSeasonsGetExternalIDsResponse } from \"../types/v3/tv-seasons/get-external-ids\";\nimport { TVSeasonsGetImagesResponse } from \"../types/v3/tv-seasons/get-images\";\nimport { TVSeasonsGetTranslationsResponse } from \"../types/v3/tv-seasons/get-translations\";\nimport { TVSeasonsGetVideosResponse } from \"../types/v3/tv-seasons/get-videos\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVSeasonsMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"tvSeasons\"] => {\n  return {\n    getDetails: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetDetailsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}`, params));\n\n      return res;\n    },\n    getAccountStates: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetAccountStatesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/account_states`, params));\n\n      return res;\n    },\n    getAggregateCredits: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetAggregateCreditsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/aggregate_credits`, params));\n\n      return res;\n    },\n    getChanges: async (seasonId, params) => {\n      const res = await client.get<TVSeasonsGetChangesResponse>(buildV3Url(apiKey, `${url}tv/season/${seasonId}/changes`, params));\n\n      return res;\n    },\n    getCredits: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetCreditsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/credits`, params));\n\n      return res;\n    },\n    getExternalIds: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetExternalIDsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/external_ids`, params));\n\n      return res;\n    },\n    getImages: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetImagesResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/images`, params));\n\n      return res;\n    },\n    getTranslations: async (tvId, seasonNumber) => {\n      const res = await client.get<TVSeasonsGetTranslationsResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/translations`));\n\n      return res;\n    },\n    getVideos: async (tvId, seasonNumber, params) => {\n      const res = await client.get<TVSeasonsGetVideosResponse>(buildV3Url(apiKey, `${url}tv/${tvId}/season/${seasonNumber}/videos`, params));\n\n      return res;\n    },\n  };\n};\n","import { Http, ITMDBAPI } from \"..\";\nimport { WatchProvidersGetAvailableRegionsResponse } from \"../types/v3/watch-providers/get-available-regions\";\nimport { WatchProvidersGetMovieProvidersResponse } from \"../types/v3/watch-providers/get-movie-providers\";\nimport { WatchProvidersGetTVProvidersResponse } from \"../types/v3/watch-providers/get-tv-providers\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3WatchProvidersMethods = (client: Http, apiKey: string, url: string): ITMDBAPI[\"v3\"][\"watchProviders\"] => {\n  return {\n    getAvailableRegions: async (params) => {\n      const res = await client.get<WatchProvidersGetAvailableRegionsResponse>(buildV3Url(apiKey, `${url}watch/providers/regions`, params));\n\n      return res;\n    },\n    getMovieProviders: async (params) => {\n      const res = await client.get<WatchProvidersGetMovieProvidersResponse>(buildV3Url(apiKey, `${url}watch/providers/movie`, params));\n\n      return res;\n    },\n    getTVProviders: async (params) => {\n      const res = await client.get<WatchProvidersGetTVProvidersResponse>(buildV3Url(apiKey, `${url}watch/providers/tv`, params));\n\n      return res;\n    },\n  };\n};\n","export const createV4Proxy = (methods: any, accessToken?: string) => {\n  return new Proxy(methods, {\n    get(target, prop, receiver) {\n      const origMethod = Reflect.get(target, prop, receiver);\n      if (typeof origMethod === \"function\") {\n        return (...args: any[]) => {\n          if (accessToken === undefined) {\n            throw new Error(\"Access token is required for the v4 API\");\n          }\n          return origMethod.apply(this, args);\n        };\n      } else {\n        return origMethod;\n      }\n    },\n  });\n};\n","import { Http, V4IAccount } from \"..\";\nimport { V4AccountGetFavoriteMoviesResponse } from \"../types/v4/account/get-favorite-movies\";\nimport { V4AccountGetFavoriteTVShowsResponse } from \"../types/v4/account/get-favorite-tvshows\";\nimport { V4AccountGetListsResponse } from \"../types/v4/account/get-lists\";\nimport { V4AccountGetMovieRecommendationsResponse } from \"../types/v4/account/get-movie-recommendations\";\nimport { V4AccountGetMovieWatchlistResponse } from \"../types/v4/account/get-movie-watchlist\";\nimport { V4AccountGetRatedMoviesResponse } from \"../types/v4/account/get-rated-movies\";\nimport { V4AccountGetRatedTVShowsResponse } from \"../types/v4/account/get-rated-tvshows\";\nimport { V4AccountGetTVShowRecommendationsResponse } from \"../types/v4/account/get-tvshow-recommendations\";\nimport { V4AccountGetTVShowWatchlistResponse } from \"../types/v4/account/get-tvshow-watchlist\";\nimport { buildV4Url } from \"../utils/api\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nexport const createV4AccountMethods = (\n  client: Http,\n  apiUrl: string,\n  accessToken?: string\n): V4IAccount => {\n  const accountMethods: V4IAccount = {\n    getLists: async (accountId, params) => {\n      const res = await client.get<V4AccountGetListsResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/lists`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getFavoriteMovies: async (accountId, params) => {\n      const res = await client.get<V4AccountGetFavoriteMoviesResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/movie/favorites`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getFavoriteTVShows: async (accountId, params) => {\n      const res = await client.get<V4AccountGetFavoriteTVShowsResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/tv/favorites`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getMovieRecommendations: async (accountId, params) => {\n      const res = await client.get<V4AccountGetMovieRecommendationsResponse>(\n        buildV4Url(\n          `${apiUrl}account/${accountId}/movie/recommendations`,\n          params\n        ),\n        accessToken\n      );\n\n      return res;\n    },\n    getTVShowRecommendations: async (accountId, params) => {\n      const res = await client.get<V4AccountGetTVShowRecommendationsResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/tv/recommendations`, params)\n      );\n\n      return res;\n    },\n    getMovieWatchlist: async (accountId, params) => {\n      const res = await client.get<V4AccountGetMovieWatchlistResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/movie/watchlist`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getTVShowWatchlist: async (accountId, params) => {\n      const res = await client.get<V4AccountGetTVShowWatchlistResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/tv/watchlist`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getRatedMovies: async (accountId, params) => {\n      const res = await client.get<V4AccountGetRatedMoviesResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/movie/rated`, params),\n        accessToken\n      );\n\n      return res;\n    },\n    getRatedTVShows: async (accountId, params) => {\n      const res = await client.get<V4AccountGetRatedTVShowsResponse>(\n        buildV4Url(`${apiUrl}account/${accountId}/tv/rated`, params),\n        accessToken\n      );\n\n      return res;\n    },\n  };\n\n  const accountMethodsProxy = createV4Proxy(accountMethods, accessToken);\n  return accountMethodsProxy;\n};\n","import { Http, V4IAuth } from \"..\";\nimport { V4AuthCreateAccessTokenResponse } from \"../types/v4/auth/create-access-token\";\nimport { V4AuthCreateRequestTokenResponse } from \"../types/v4/auth/create-request-token\";\nimport { V4AuthDeleteAccessTokenResponse } from \"../types/v4/auth/delete-access-token\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nexport const createV4AuthMethods = (\n  client: Http,\n  apiUrl: string,\n  accessToken?: string\n): V4IAuth => {\n  const authMethods: V4IAuth = {\n    createRequestToken: async (body) => {\n      const res = await client.post<\n        V4AuthCreateRequestTokenResponse,\n        typeof body\n      >(`${apiUrl}auth/request_token`, body, accessToken);\n\n      return res;\n    },\n    createAccessToken: async (body) => {\n      const res = await client.post<\n        V4AuthCreateAccessTokenResponse,\n        typeof body\n      >(`${apiUrl}auth/access_token`, body, accessToken);\n\n      return res;\n    },\n    deleteAccessToken: async (body) => {\n      const res = await client.delete<\n        V4AuthDeleteAccessTokenResponse,\n        typeof body\n      >(`${apiUrl}auth/access_token`, body, accessToken);\n\n      return res;\n    },\n  };\n\n  const authMethodsProxy = createV4Proxy(authMethods, accessToken);\n  return authMethodsProxy;\n};\n","import { Http, V4IList } from \"..\";\nimport { V4ListAddItemsResponse } from \"../types/v4/list/add-items\";\nimport { V4ListCheckItemStatusResponse } from \"../types/v4/list/check-item-status\";\nimport { V4ListClearListResponse } from \"../types/v4/list/clear-list\";\nimport { V4ListCreateListResponse } from \"../types/v4/list/create-list\";\nimport { V4ListDeleteListResponse } from \"../types/v4/list/delete-list\";\nimport { V4ListGetListResponse } from \"../types/v4/list/get-list\";\nimport { V4ListRemoveItemsResponse } from \"../types/v4/list/remove-items\";\nimport { V4ListUpdateItemsResponse } from \"../types/v4/list/update-items\";\nimport { V4ListUpdateListResponse } from \"../types/v4/list/update-list\";\nimport { buildV4Url } from \"../utils/api\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nconst getListUrl = (url: string, listId?: string): string => {\n  let formattedUrl = url;\n\n  if (listId) {\n    formattedUrl = formattedUrl.replace(\"{list_id}\", listId.toString());\n  } else {\n    formattedUrl = formattedUrl.replace(\"/{list_id}\", \"\");\n  }\n\n  return formattedUrl;\n};\n\nexport const createV4ListMethods = (\n  client: Http,\n  apiUrl: string,\n  accessToken?: string\n): V4IList => {\n  const listMethods: V4IList = {\n    getList: async (params, listId) => {\n      const res = await client.get<V4ListGetListResponse>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId), params),\n        accessToken\n      );\n\n      return res;\n    },\n    createList: async (body) => {\n      const res = await client.post<V4ListCreateListResponse, typeof body>(\n        buildV4Url(`${apiUrl}list`),\n        body,\n        accessToken\n      );\n\n      return res;\n    },\n    updateList: async (body, listId) => {\n      const res = await client.put<V4ListUpdateListResponse, typeof body>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId)),\n        body,\n        accessToken\n      );\n\n      return res;\n    },\n    clearList: async (listId) => {\n      const res = await client.post<V4ListClearListResponse>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}/clear`, listId)),\n        undefined,\n        accessToken\n      );\n\n      return res;\n    },\n    deleteList: async (listId) => {\n      const res = await client.delete<V4ListDeleteListResponse>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId)),\n        undefined,\n        accessToken\n      );\n\n      return res;\n    },\n    addItems: async (body, listId) => {\n      const res = await client.post<V4ListAddItemsResponse, typeof body>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)),\n        body,\n        accessToken\n      );\n\n      return res;\n    },\n    updateItems: async (body, listId) => {\n      const res = await client.put<V4ListUpdateItemsResponse, typeof body>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)),\n        body,\n        accessToken\n      );\n\n      return res;\n    },\n    removeItems: async (body, listId) => {\n      const res = await client.delete<V4ListRemoveItemsResponse, typeof body>(\n        buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)),\n        body,\n        accessToken\n      );\n\n      return res;\n    },\n    checkItemStatus: async (params, listId) => {\n      const res = await client.get<V4ListCheckItemStatusResponse>(\n        buildV4Url(\n          getListUrl(`${apiUrl}list/{list_id}/item_status`, listId),\n          params\n        ),\n        accessToken\n      );\n\n      return res;\n    },\n  };\n\n  const listMethodsProxy = createV4Proxy(listMethods, accessToken);\n  return listMethodsProxy;\n};\n","import { MoviesAppendToResponse, PeopleAppendToResponse, TVAppendToResponse, TVEpisodesAppendToResponse, TVSeasonsAppendToResponse } from \"./types/append-to-response\";\nimport {\n  AccountGetDetailsParams,\n  AccountGetDetailsResponse,\n  AccountGetCreatedListsParams,\n  AccountGetCreatedListsResponse,\n  AccountGetFavoriteMoviesParams,\n  AccountGetFavoriteMoviesResponse,\n  AccountGetFavoriteTVShowsParams,\n  AccountGetFavoriteTVShowsResponse,\n  AccountMarkAsFavoriteParams,\n  AccountMarkAsFavoriteBody,\n  AccountMarkAsFavoriteResponse,\n  AccountGetRatedMoviesParams,\n  AccountGetRatedMoviesResponse,\n  AccountGetRatedTVShowsParams,\n  AccountGetRatedTVShowsResponse,\n  AccountGetRatedTVEpisodesParams,\n  AccountGetRatedTVEpisodesResponse,\n  AccountGetMovieWatchlistParams,\n  AccountGetMovieWatchlistResponse,\n  AccountGetTVShowWatchlistParams,\n  AccountGetTVShowWatchlistResponse,\n  AccountAddToWatchlistParams,\n  AccountAddToWatchlistBody,\n  AccountAddToWatchlistResponse,\n  AuthenticationCreateGuestSessionResponse,\n  AuthenticationCreateRequestTokenResponse,\n  AuthenticationCreateSessionBody,\n  AuthenticationCreateSessionResponse,\n  AuthenticationCreateSessionWithLoginBody,\n  AuthenticationCreateSessionWithLoginResponse,\n  AuthenticationCreateSessionFromV4AccessTokenBody,\n  AuthenticationCreateSessionFromV4AccessTokenResponse,\n  AuthenticationDeleteSessionBody,\n  AuthenticationDeleteSessionResponse,\n  CertificationsGetMovieCertificationResponse,\n  CertificationsGetTVCertificationResponse,\n  ChangesGetMovieChangeListParams,\n  ChangesGetMovieChangeListResponse,\n  ChangesGetTVChangeListParams,\n  ChangesGetTVChangeListResponse,\n  ChangesGetPersonChangeListParams,\n  ChangesGetPersonChangeListResponse,\n  CollectionsGetDetailsParams,\n  CollectionsGetDetailsResponse,\n  CollectionsGetImagesParams,\n  CollectionsGetImagesResponse,\n  CollectionsGetTranslationsParams,\n  CollectionsGetTranslationsResponse,\n  CompaniesGetDetailsResponse,\n  CompaniesGetAlternativeNamesResponse,\n  CompaniesGetImagesResponse,\n  ConfigurationGetApiConfigurationResponse,\n  ConfigurationGetCountriesResponse,\n  ConfigurationGetJobsResponse,\n  ConfigurationGetLanguagesResponse,\n  ConfigurationGetPrimaryTranslationsResponse,\n  ConfigurationGetTimezonesResponse,\n  CreditsGetDetailsResponse,\n  DiscoverMovieDiscoverParams,\n  DiscoverMovieDiscoverResponse,\n  DiscoverTVDiscoverParams,\n  DiscoverTVDiscoverResponse,\n  FindFindByIdParams,\n  FindFindByIdResponse,\n  GenresGetMovieListParams,\n  GenresGetMovieListResponse,\n  GenresGetTVListParams,\n  GenresGetTVListResponse,\n  GuestSessionsGetRatedMoviesParams,\n  GuestSessionsGetRatedMoviesResponse,\n  GuestSessionsGetRatedTVShowsParams,\n  GuestSessionsGetRatedTVShowsResponse,\n  GuestSessionsGetRatedTVEpisodesParams,\n  GuestSessionsGetRatedTVEpisodesResponse,\n  KeywordsGetDetailsResponse,\n  KeywordsGetMoviesParams,\n  KeywordsGetMoviesResponse,\n  ListsGetDetailsParams,\n  ListsGetDetailsResponse,\n  ListsCheckItemStatusParams,\n  ListsCheckItemStatusResponse,\n  ListsCreateListBody,\n  ListsCreateListParams,\n  ListsCreateListResponse,\n  ListsAddMovieBody,\n  ListsAddMovieParams,\n  ListsAddMovieResponse,\n  ListsRemoveMovieBody,\n  ListsRemoveMovieParams,\n  ListsRemoveMovieResponse,\n  ListsClearListParams,\n  ListsClearListResponse,\n  ListsDeleteListParams,\n  ListsDeleteListResponse,\n  MoviesGetDetailsParams,\n  MoviesGetDetailsResponse,\n  MoviesGetAccountStatesParams,\n  MoviesGetAccountStatesResponse,\n  MoviesGetAlternativeTitlesParams,\n  MoviesGetAlternativeTitlesResponse,\n  MoviesGetChangesParams,\n  MoviesGetChangesResponse,\n  MoviesGetCreditsParams,\n  MoviesGetCreditsResponse,\n  MoviesGetExternalIdsResponse,\n  MoviesGetImagesParams,\n  MoviesGetImagesResponse,\n  MoviesGetKeywordsResponse,\n  MoviesGetListsParams,\n  MoviesGetListsResponse,\n  MoviesGetRecommendationsParams,\n  MoviesGetRecommendationsResponse,\n  MoviesGetReleaseDatesResponse,\n  MoviesGetReviewsParams,\n  MoviesGetReviewsResponse,\n  MoviesGetSimilarMoviesParams,\n  MoviesGetSimilarMoviesResponse,\n  MoviesGetTranslationsResponse,\n  MoviesGetVideosParams,\n  MoviesGetVideosResponse,\n  MoviesGetWatchProvidersResponse,\n  MoviesRateMovieBody,\n  MoviesRateMovieParams,\n  MoviesRateMovieResponse,\n  MoviesDeleteRatingParams,\n  MoviesDeleteRatingResponse,\n  MoviesGetLatestResponse,\n  MoviesGetNowPlayingParams,\n  MoviesGetNowPlayingResponse,\n  MoviesGetPopularParams,\n  MoviesGetPopularResponse,\n  MoviesGetTopRatedParams,\n  MoviesGetTopRatedResponse,\n  MoviesGetUpcomingParams,\n  MoviesGetUpcomingResponse,\n  NetworksGetDetailsResponse,\n  NetworksGetAlternativeNamesResponse,\n  NetworksGetImagesResponse,\n  TrendingGetTrendingResponse,\n  PeopleGetDetailsParams,\n  PeopleGetDetailsResponse,\n  PeopleGetChangesParams,\n  PeopleGetChangesResponse,\n  PeopleGetMovieCreditsParams,\n  PeopleGetMovieCreditsResponse,\n  PeopleGetTvCreditsParams,\n  PeopleGetTvCreditsResponse,\n  PeopleGetCombinedCreditsParams,\n  PeopleGetCombinedCreditsResponse,\n  PeopleGetExternalIdsResponse,\n  PeopleGetImagesResponse,\n  PeopleGetTaggedImagesParams,\n  PeopleGetTaggedImagesResponse,\n  PeopleGetTranslationsParams,\n  PeopleGetTranslationsResponse,\n  PeopleGetLatestParams,\n  PeopleGetLatestResponse,\n  PeopleGetPopularParams,\n  PeopleGetPopularResponse,\n  ReviewsGetDetailsResponse,\n  SearchCompaniesParams,\n  SearchCompaniesResponse,\n  SearchCollectionsParams,\n  SearchCollectionsResponse,\n  SearchKeywordsParams,\n  SearchKeywordsResponse,\n  SearchMoviesParams,\n  SearchMoviesResponse,\n  SearchMultiSearchParams,\n  SearchMultiSearchResponse,\n  SearchPeopleParams,\n  SearchPeopleResponse,\n  SearchTVShowsParams,\n  SearchTVShowsResponse,\n  TVGetDetailsParams,\n  TVGetDetailsResponse,\n  TVGetAccountStatesParams,\n  TVGetAccountStatesResponse,\n  TVGetAggregateCreditsParams,\n  TVGetAggregateCreditsResponse,\n  TVGetAlternativeTitlesParams,\n  TVGetAlternativeTitlesResponse,\n  TVGetChangesParams,\n  TVGetChangesResponse,\n  TVGetContentRatingsParams,\n  TVGetContentRatingsResponse,\n  TVGetCreditsParams,\n  TVGetCreditsResponse,\n  TVGetEpisodeGroupsParams,\n  TVGetEpisodeGroupsResponse,\n  TVGetExternalIdsParams,\n  TVGetExternalIdsResponse,\n  TVGetImagesParams,\n  TVGetImagesResponse,\n  TVGetKeywordsResponse,\n  TVGetRecommendationsParams,\n  TVGetRecommendationsResponse,\n  TVGetReviewsParams,\n  TVGetReviewsResponse,\n  TVGetScreenedTheatricallyParams,\n  TVGetScreenedTheatricallyResponse,\n  TVGetSimilarTVShowsParams,\n  TVGetSimilarTVShowsResponse,\n  TVGetTranslationsResponse,\n  TVGetVideosParams,\n  TVGetVideosResponse,\n  TVGetWatchProvidersResponse,\n  TVRateTVShowsBody,\n  TVRateTVShowsParams,\n  TVRateTVShowsResponse,\n  TVDeleteRatingParams,\n  TVEpisodesDeleteRatingResponse,\n  TVGetLatestParams,\n  TVGetLatestResponse,\n  TVGetTVAiringTodayParams,\n  TVGetTVAiringTodayResponse,\n  TVGetTVOnTheAirParams,\n  TVGetTVOnTheAirResponse,\n  TVGetPopularParams,\n  TVGetPopularResponse,\n  TVGetTopRatedParams,\n  TVGetTopRatedResponse,\n  TVSeasonsGetDetailsParams,\n  TVSeasonsGetDetailsResponse,\n  TVSeasonsGetAccountStatesParams,\n  TVSeasonsGetAccountStatesResponse,\n  TVSeasonsGetAggregateCreditsParams,\n  TVSeasonsGetAggregateCreditsResponse,\n  TVSeasonsGetChangesParams,\n  TVSeasonsGetChangesResponse,\n  TVSeasonsGetCreditsParams,\n  TVSeasonsGetCreditsResponse,\n  TVSeasonsGetExternalIDsParams,\n  TVSeasonsGetExternalIDsResponse,\n  TVSeasonsGetImagesParams,\n  TVSeasonsGetImagesResponse,\n  TVSeasonsGetTranslationsResponse,\n  TVSeasonsGetVideosParams,\n  TVSeasonsGetVideosResponse,\n  TVEpisodesGetDetailsParams,\n  TVEpisodesGetDetailsResponse,\n  TVEpisodesGetAccountStatesParams,\n  TVEpisodesGetAccountStatesResponse,\n  TVEpisodesGetChangesParams,\n  TVEpisodesGetChangesResponse,\n  TVEpisodesGetCreditsParams,\n  TVEpisodesGetCreditsResponse,\n  TVEpisodesGetExternalIDsResponse,\n  TVEpisodesGetImagesResponse,\n  TVEpisodesGetTranslationsResponse,\n  TVEpisodesRateTVEpisodeBody,\n  TVEpisodesRateTVEpisodeParams,\n  TVEpisodesRateTVEpisodeResponse,\n  TVEpisodesDeleteRatingParams,\n  TVEpisodesGetVideosParams,\n  TVEpisodesGetVideosResponse,\n  TVEpisodeGroupsGetDetailsParams,\n  TVEpisodeGroupsGetDetailsResponse,\n  WatchProvidersGetAvailableRegionsParams,\n  WatchProvidersGetAvailableRegionsResponse,\n  WatchProvidersGetMovieProvidersParams,\n  WatchProvidersGetMovieProvidersResponse,\n  WatchProvidersGetTVProvidersParams,\n  WatchProvidersGetTVProvidersResponse,\n  TrendingGetTrendingParams,\n  GetDetailsResponse,\n} from \"./types/v3\";\nimport {\n  V4AccountGetListsParams,\n  V4AccountGetListsResponse,\n  V4AccountGetFavoriteMoviesParams,\n  V4AccountGetFavoriteMoviesResponse,\n  V4AccountGetFavoriteTVShowsParams,\n  V4AccountGetFavoriteTVShowsResponse,\n  V4AccountGetMovieRecommendationsParams,\n  V4AccountGetMovieRecommendationsResponse,\n  V4AccountGetTVShowRecommendationsParams,\n  V4AccountGetTVShowRecommendationsResponse,\n  V4AccountGetMovieWatchlistParams,\n  V4AccountGetMovieWatchlistResponse,\n  V4AccountGetTVShowWatchlistParams,\n  V4AccountGetTVShowWatchlistResponse,\n  V4AccountGetRatedMoviesParams,\n  V4AccountGetRatedMoviesResponse,\n  V4AccountGetRatedTVShowsParams,\n  V4AccountGetRatedTVShowsResponse,\n  V4AuthCreateRequestTokenBody,\n  V4AuthCreateRequestTokenResponse,\n  V4AuthCreateAccessTokenBody,\n  V4AuthCreateAccessTokenResponse,\n  V4AuthDeleteAccessTokenBody,\n  V4AuthDeleteAccessTokenResponse,\n  V4ListGetListParams,\n  V4ListGetListResponse,\n  V4ListCreateListBody,\n  V4ListCreateListResponse,\n  V4ListUpdateListBody,\n  V4ListUpdateListResponse,\n  V4ListClearListResponse,\n  V4ListDeleteListResponse,\n  V4ListAddItemsBody,\n  V4ListAddItemsResponse,\n  V4ListUpdateItemsBody,\n  V4ListUpdateItemsResponse,\n  V4ListRemoveItemsBody,\n  V4ListRemoveItemsResponse,\n  V4ListCheckItemStatusParams,\n  V4ListCheckItemStatusResponse,\n} from \"./types/v4\";\nimport { createV3AccountMethods } from \"./v3/account\";\nimport { createV3AuthenticationMethods } from \"./v3/authentication\";\nimport { createV3CertificationsMethods } from \"./v3/certifications\";\nimport { createV3ChangesMethods } from \"./v3/changes\";\nimport { createV3CollectionsMethods } from \"./v3/collections\";\nimport { createV3CompaniesMethods } from \"./v3/companies\";\nimport { createV3ConfigurationMethods } from \"./v3/configuration\";\nimport { createV3CreditsMethods } from \"./v3/credits\";\nimport { createV3DiscoverMethods } from \"./v3/discover\";\nimport { createV3FindMethods } from \"./v3/find\";\nimport { createV3GenresMethods } from \"./v3/genres\";\nimport { createV3GuestSessionsMethods } from \"./v3/guest-sessions\";\nimport { createV3KeywordsMethods } from \"./v3/keywords\";\nimport { createV3ListsMethods } from \"./v3/lists\";\nimport { createV3MoviesMethods } from \"./v3/movies\";\nimport { createV3NetworksMethods } from \"./v3/networks\";\nimport { createV3PeopleMethods } from \"./v3/people\";\nimport { createV3ReviewsMethods } from \"./v3/reviews\";\nimport { createV3SearchMethods } from \"./v3/search\";\nimport { createV3TrendingMethods } from \"./v3/trending\";\nimport { createV3TvMethods } from \"./v3/tv\";\nimport { createV3TVEpisodeGroupsMethods } from \"./v3/tv-episode-groups\";\nimport { createV3TVEpisodesMethods } from \"./v3/tv-episodes\";\nimport { createV3TVSeasonsMethods } from \"./v3/tv-seasons\";\nimport { createV3WatchProvidersMethods } from \"./v3/watch-providers\";\nimport { createV4AccountMethods } from \"./v4/account\";\nimport { createV4AuthMethods } from \"./v4/auth\";\nimport { createV4ListMethods } from \"./v4/list\";\n\ninterface IAccount {\n  getDetails: (params: AccountGetDetailsParams) => Promise<AccountGetDetailsResponse>;\n  getCreatedLists: (params: AccountGetCreatedListsParams, accountId?: number) => Promise<AccountGetCreatedListsResponse>;\n  getFavoriteMovies: (params: AccountGetFavoriteMoviesParams, accountId?: number) => Promise<AccountGetFavoriteMoviesResponse>;\n  getFavoriteTVShows: (params: AccountGetFavoriteTVShowsParams, accountId?: number) => Promise<AccountGetFavoriteTVShowsResponse>;\n  markAsFavorite: (params: AccountMarkAsFavoriteParams, body: AccountMarkAsFavoriteBody, accountId?: number) => Promise<AccountMarkAsFavoriteResponse>;\n  getRatedMovies: (params: AccountGetRatedMoviesParams, accountId?: number) => Promise<AccountGetRatedMoviesResponse>;\n  getRatedTVShows: (params: AccountGetRatedTVShowsParams, accountId?: number) => Promise<AccountGetRatedTVShowsResponse>;\n  getRatedTVEpisodes: (params: AccountGetRatedTVEpisodesParams, accountId?: number) => Promise<AccountGetRatedTVEpisodesResponse>;\n  getMovieWatchlist: (params: AccountGetMovieWatchlistParams, accountId?: number) => Promise<AccountGetMovieWatchlistResponse>;\n  getTVShowWatchlist: (params: AccountGetTVShowWatchlistParams, accountId?: number) => Promise<AccountGetTVShowWatchlistResponse>;\n  addToWatchlist: (params: AccountAddToWatchlistParams, body: AccountAddToWatchlistBody, accountId?: number) => Promise<AccountAddToWatchlistResponse>;\n}\n\ninterface IAuthentication {\n  createGuestSession: () => Promise<AuthenticationCreateGuestSessionResponse>;\n  createRequestToken: () => Promise<AuthenticationCreateRequestTokenResponse>;\n  createSession: (body: AuthenticationCreateSessionBody) => Promise<AuthenticationCreateSessionResponse>;\n  createSessionWithLogin: (body: AuthenticationCreateSessionWithLoginBody) => Promise<AuthenticationCreateSessionWithLoginResponse>;\n  createSessionFromV4AccessToken: (body: AuthenticationCreateSessionFromV4AccessTokenBody) => Promise<AuthenticationCreateSessionFromV4AccessTokenResponse>;\n  deleteSession: (body: AuthenticationDeleteSessionBody) => Promise<AuthenticationDeleteSessionResponse>;\n}\n\ninterface ICertifications {\n  getMovieCertifications: () => Promise<CertificationsGetMovieCertificationResponse>;\n  getTVShowCertifications: () => Promise<CertificationsGetTVCertificationResponse>;\n}\n\ninterface IChanges {\n  getMovieChangeList: (params?: ChangesGetMovieChangeListParams) => Promise<ChangesGetMovieChangeListResponse>;\n  getTVChangeList: (params?: ChangesGetTVChangeListParams) => Promise<ChangesGetTVChangeListResponse>;\n  getPersonChangeList: (params?: ChangesGetPersonChangeListParams) => Promise<ChangesGetPersonChangeListResponse>;\n}\n\ninterface ICollections {\n  getDetails: (collectionId: number, params?: CollectionsGetDetailsParams) => Promise<CollectionsGetDetailsResponse>;\n  getImages: (collectionId: number, params?: CollectionsGetImagesParams) => Promise<CollectionsGetImagesResponse>;\n  getTranslations: (collectionId: number, params?: CollectionsGetTranslationsParams) => Promise<CollectionsGetTranslationsResponse>;\n}\n\ninterface ICompanies {\n  getDetails: (companyId: number) => Promise<CompaniesGetDetailsResponse>;\n  getAlternativeNames: (companyId: number) => Promise<CompaniesGetAlternativeNamesResponse>;\n  getImages: (companyId: number) => Promise<CompaniesGetImagesResponse>;\n}\n\ninterface IConfiguration {\n  getAPIConfiguration: () => Promise<ConfigurationGetApiConfigurationResponse>;\n  getCountries: () => Promise<ConfigurationGetCountriesResponse>;\n  getJobs: () => Promise<ConfigurationGetJobsResponse>;\n  getLanguages: () => Promise<ConfigurationGetLanguagesResponse>;\n  getPrimaryTranslations: () => Promise<ConfigurationGetPrimaryTranslationsResponse>;\n  getTimezones: () => Promise<ConfigurationGetTimezonesResponse>;\n}\n\ninterface ICredits {\n  getDetails: (creditId: string) => Promise<CreditsGetDetailsResponse>;\n}\n\ninterface IDiscover {\n  movieDiscover: (params?: DiscoverMovieDiscoverParams) => Promise<DiscoverMovieDiscoverResponse>;\n  tvDiscover: (params?: DiscoverTVDiscoverParams) => Promise<DiscoverTVDiscoverResponse>;\n}\n\ninterface IFind {\n  findById: (externalId: string, params: FindFindByIdParams) => Promise<FindFindByIdResponse>;\n}\n\ninterface IGenres {\n  getMovieList: (params?: GenresGetMovieListParams) => Promise<GenresGetMovieListResponse>;\n  getTVList: (params?: GenresGetTVListParams) => Promise<GenresGetTVListResponse>;\n}\n\ninterface IGuestSessions {\n  getRatedMovies: (guestSessionId: string, params?: GuestSessionsGetRatedMoviesParams) => Promise<GuestSessionsGetRatedMoviesResponse>;\n  getRatedTVShows: (guestSessionId: string, params?: GuestSessionsGetRatedTVShowsParams) => Promise<GuestSessionsGetRatedTVShowsResponse>;\n  getRatedTVEpisodes: (guestSessionId: string, params?: GuestSessionsGetRatedTVEpisodesParams) => Promise<GuestSessionsGetRatedTVEpisodesResponse>;\n}\n\ninterface IKeywords {\n  getDetails: (keywordId: number) => Promise<KeywordsGetDetailsResponse>;\n  getMovies: (keywordId: number, params?: KeywordsGetMoviesParams) => Promise<KeywordsGetMoviesResponse>;\n}\n\ninterface ILists {\n  getDetails: (listId: string, params?: ListsGetDetailsParams) => Promise<ListsGetDetailsResponse>;\n  checkItemStatus: (listId: string, params: ListsCheckItemStatusParams) => Promise<ListsCheckItemStatusResponse>;\n  createList: (body: ListsCreateListBody, params: ListsCreateListParams) => Promise<ListsCreateListResponse>;\n  addMovie: (listId: string, body: ListsAddMovieBody, params: ListsAddMovieParams) => Promise<ListsAddMovieResponse>;\n  removeMovie: (listId: string, body: ListsRemoveMovieBody, params: ListsRemoveMovieParams) => Promise<ListsRemoveMovieResponse>;\n  clearList: (listId: string, params: ListsClearListParams) => Promise<ListsClearListResponse>;\n  deleteList: (listId: string, params: ListsDeleteListParams) => Promise<ListsDeleteListResponse>;\n}\n\ninterface IMovies {\n  getDetails: <T extends MoviesAppendToResponse[]>(movieId: number, params?: MoviesGetDetailsParams<T>) => Promise<GetDetailsResponse<T>>;\n  getAccountStates: (movieId: number, params: MoviesGetAccountStatesParams) => Promise<MoviesGetAccountStatesResponse>;\n  getAlternativeTitles: (movieId: number, params?: MoviesGetAlternativeTitlesParams) => Promise<MoviesGetAlternativeTitlesResponse>;\n  getChanges: (movieId: number, params?: MoviesGetChangesParams) => Promise<MoviesGetChangesResponse>;\n  getCredits: (movieId: number, params?: MoviesGetCreditsParams) => Promise<MoviesGetCreditsResponse>;\n  getExternalIds: (movieId: number) => Promise<MoviesGetExternalIdsResponse>;\n  getImages: (movieId: number, params?: MoviesGetImagesParams) => Promise<MoviesGetImagesResponse>;\n  getKeywords: (movieId: number) => Promise<MoviesGetKeywordsResponse>;\n  getLists: (movieId: number, params?: MoviesGetListsParams) => Promise<MoviesGetListsResponse>;\n  getRecommendations: (movieId: number, params?: MoviesGetRecommendationsParams) => Promise<MoviesGetRecommendationsResponse>;\n  getReleaseDates: (movieId: number) => Promise<MoviesGetReleaseDatesResponse>;\n  getReviews: (movieId: number, params?: MoviesGetReviewsParams) => Promise<MoviesGetReviewsResponse>;\n  getSimilarMovies: (movieId: number, params?: MoviesGetSimilarMoviesParams) => Promise<MoviesGetSimilarMoviesResponse>;\n  getTranslations: (movieId: number) => Promise<MoviesGetTranslationsResponse>;\n  getVideos: (movieId: number, params?: MoviesGetVideosParams) => Promise<MoviesGetVideosResponse>;\n  getWatchProviders: (movieId: number) => Promise<MoviesGetWatchProvidersResponse>;\n  rateMovie: (movieId: number, body: MoviesRateMovieBody, params?: MoviesRateMovieParams) => Promise<MoviesRateMovieResponse>;\n  deleteRating: (movieId: number, params?: MoviesDeleteRatingParams) => Promise<MoviesDeleteRatingResponse>;\n  getLatest: () => Promise<MoviesGetLatestResponse>;\n  getNowPlaying: (params?: MoviesGetNowPlayingParams) => Promise<MoviesGetNowPlayingResponse>;\n  getPopular: (params?: MoviesGetPopularParams) => Promise<MoviesGetPopularResponse>;\n  getTopRated: (params?: MoviesGetTopRatedParams) => Promise<MoviesGetTopRatedResponse>;\n  getUpcoming: (params?: MoviesGetUpcomingParams) => Promise<MoviesGetUpcomingResponse>;\n}\n\ninterface INetworks {\n  getDetails: (networkId: number) => Promise<NetworksGetDetailsResponse>;\n  getAlternativeNames: (networkId: number) => Promise<NetworksGetAlternativeNamesResponse>;\n  getImages: (networkId: number) => Promise<NetworksGetImagesResponse>;\n}\n\ninterface ITrending {\n  getTrending: (mediaType: TrendingGetTrendingParams[\"media_type\"], timeWindow: TrendingGetTrendingParams[\"time_window\"]) => Promise<TrendingGetTrendingResponse>;\n}\n\ninterface IPeople {\n  getDetails: <T extends PeopleAppendToResponse[]>(personId: number, params?: PeopleGetDetailsParams<T>) => Promise<PeopleGetDetailsResponse>;\n  getChanges: (personId: number, params?: PeopleGetChangesParams) => Promise<PeopleGetChangesResponse>;\n  getMovieCredits: (personId: number, params?: PeopleGetMovieCreditsParams) => Promise<PeopleGetMovieCreditsResponse>;\n  getTVCredits: (personId: number, params?: PeopleGetTvCreditsParams) => Promise<PeopleGetTvCreditsResponse>;\n  getCombinedCredits: (personId: number, params?: PeopleGetCombinedCreditsParams) => Promise<PeopleGetCombinedCreditsResponse>;\n  getExternalIds: (personId: number) => Promise<PeopleGetExternalIdsResponse>;\n  getImages: (personId: number) => Promise<PeopleGetImagesResponse>;\n  getTaggedImages: (personId: number, params?: PeopleGetTaggedImagesParams) => Promise<PeopleGetTaggedImagesResponse>;\n  getTranslations: (personId: number, params?: PeopleGetTranslationsParams) => Promise<PeopleGetTranslationsResponse>;\n  getLatest: (params?: PeopleGetLatestParams) => Promise<PeopleGetLatestResponse>;\n  getPopular: (params?: PeopleGetPopularParams) => Promise<PeopleGetPopularResponse>;\n}\n\ninterface IReviews {\n  getDetails: (reviewId: string) => Promise<ReviewsGetDetailsResponse>;\n}\n\ninterface ISearch {\n  searchCompanies: (params: SearchCompaniesParams) => Promise<SearchCompaniesResponse>;\n  searchCollections: (params: SearchCollectionsParams) => Promise<SearchCollectionsResponse>;\n  searchKeywords: (params: SearchKeywordsParams) => Promise<SearchKeywordsResponse>;\n  searchMovies: (params: SearchMoviesParams) => Promise<SearchMoviesResponse>;\n  searchMulti: (params: SearchMultiSearchParams) => Promise<SearchMultiSearchResponse>;\n  searchPeople: (params: SearchPeopleParams) => Promise<SearchPeopleResponse>;\n  searchTV: (params: SearchTVShowsParams) => Promise<SearchTVShowsResponse>;\n}\n\ninterface ITV {\n  getDetails: <T extends TVAppendToResponse[]>(tvId: number, params?: TVGetDetailsParams<T>) => Promise<TVGetDetailsResponse>;\n  getAccountStates: (tvId: number, params?: TVGetAccountStatesParams) => Promise<TVGetAccountStatesResponse>;\n  getAggregateCredits: (tvId: number, params?: TVGetAggregateCreditsParams) => Promise<TVGetAggregateCreditsResponse>;\n  getAlternativeTitles: (tvId: number, params?: TVGetAlternativeTitlesParams) => Promise<TVGetAlternativeTitlesResponse>;\n  getChanges: (tvId: number, params?: TVGetChangesParams) => Promise<TVGetChangesResponse>;\n  getContentRatings: (tvId: number, params?: TVGetContentRatingsParams) => Promise<TVGetContentRatingsResponse>;\n  getCredits: (tvId: number, params?: TVGetCreditsParams) => Promise<TVGetCreditsResponse>;\n  getEpisodeGroups: (tvId: number, params?: TVGetEpisodeGroupsParams) => Promise<TVGetEpisodeGroupsResponse>;\n  getExternalIds: (tvId: number, params?: TVGetExternalIdsParams) => Promise<TVGetExternalIdsResponse>;\n  getImages: (tvId: number, params?: TVGetImagesParams) => Promise<TVGetImagesResponse>;\n  getKeywords: (tvId: number) => Promise<TVGetKeywordsResponse>;\n  getRecommendations: (tvId: number, params?: TVGetRecommendationsParams) => Promise<TVGetRecommendationsResponse>;\n  getReviews: (tvId: number, params?: TVGetReviewsParams) => Promise<TVGetReviewsResponse>;\n  getScreenedTheatrically: (tvId: number, params?: TVGetScreenedTheatricallyParams) => Promise<TVGetScreenedTheatricallyResponse>;\n  getSimilarTVShows: (tvId: number, params?: TVGetSimilarTVShowsParams) => Promise<TVGetSimilarTVShowsResponse>;\n  getTranslations: (tvId: number) => Promise<TVGetTranslationsResponse>;\n  getVideos: (tvId: number, params?: TVGetVideosParams) => Promise<TVGetVideosResponse>;\n  getWatchProviders: (tvId: number) => Promise<TVGetWatchProvidersResponse>;\n  rateTVShow: (tvId: number, body: TVRateTVShowsBody, params?: TVRateTVShowsParams) => Promise<TVRateTVShowsResponse>;\n  deleteRating: (tvId: number, params?: TVDeleteRatingParams) => Promise<TVEpisodesDeleteRatingResponse>;\n  getLatest: (params?: TVGetLatestParams) => Promise<TVGetLatestResponse>;\n  getTVAiringToday: (params?: TVGetTVAiringTodayParams) => Promise<TVGetTVAiringTodayResponse>;\n  getTVOnTheAir: (params?: TVGetTVOnTheAirParams) => Promise<TVGetTVOnTheAirResponse>;\n  getPopular: (params?: TVGetPopularParams) => Promise<TVGetPopularResponse>;\n  getTopRated: (params?: TVGetTopRatedParams) => Promise<TVGetTopRatedResponse>;\n}\n\ninterface ITVSeasons {\n  getDetails: <T extends TVSeasonsAppendToResponse[]>(tvId: number, seasonNumber: number, params?: TVSeasonsGetDetailsParams<T>) => Promise<TVSeasonsGetDetailsResponse>;\n  getAccountStates: (tvId: number, seasonNumber: number, params?: TVSeasonsGetAccountStatesParams) => Promise<TVSeasonsGetAccountStatesResponse>;\n  getAggregateCredits: (tvId: number, seasonNumber: number, params?: TVSeasonsGetAggregateCreditsParams) => Promise<TVSeasonsGetAggregateCreditsResponse>;\n  getChanges: (tvId: number, seasonNumber: number, params?: TVSeasonsGetChangesParams) => Promise<TVSeasonsGetChangesResponse>;\n  getCredits: (tvId: number, seasonNumber: number, params?: TVSeasonsGetCreditsParams) => Promise<TVSeasonsGetCreditsResponse>;\n  getExternalIds: (tvId: number, seasonNumber: number, params?: TVSeasonsGetExternalIDsParams) => Promise<TVSeasonsGetExternalIDsResponse>;\n  getImages: (tvId: number, seasonNumber: number, params?: TVSeasonsGetImagesParams) => Promise<TVSeasonsGetImagesResponse>;\n  getTranslations: (tvId: number, seasonNumber: number) => Promise<TVSeasonsGetTranslationsResponse>;\n  getVideos: (tvId: number, seasonNumber: number, params?: TVSeasonsGetVideosParams) => Promise<TVSeasonsGetVideosResponse>;\n}\n\ninterface ITVEpisodes {\n  getDetails: <T extends TVEpisodesAppendToResponse[]>(tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetDetailsParams<T>) => Promise<TVEpisodesGetDetailsResponse>;\n  getAccountStates: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetAccountStatesParams) => Promise<TVEpisodesGetAccountStatesResponse>;\n  getChanges: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetChangesParams) => Promise<TVEpisodesGetChangesResponse>;\n  getCredits: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetCreditsParams) => Promise<TVEpisodesGetCreditsResponse>;\n  getExternalIds: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetExternalIDsResponse>;\n  getImages: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetImagesResponse>;\n  getTranslations: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetTranslationsResponse>;\n  rateTVEpisode: (tvId: number, seasonNumber: number, episodeNumber: number, body: TVEpisodesRateTVEpisodeBody, params?: TVEpisodesRateTVEpisodeParams) => Promise<TVEpisodesRateTVEpisodeResponse>;\n  deleteRating: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesDeleteRatingParams) => Promise<TVEpisodesDeleteRatingResponse>;\n  getVideos: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetVideosParams) => Promise<TVEpisodesGetVideosResponse>;\n}\n\ninterface ITVEpisodeGroups {\n  getDetails: (id?: string, params?: TVEpisodeGroupsGetDetailsParams) => Promise<TVEpisodeGroupsGetDetailsResponse>;\n}\n\ninterface IWatchProviders {\n  getAvailableRegions: (params?: WatchProvidersGetAvailableRegionsParams) => Promise<WatchProvidersGetAvailableRegionsResponse>;\n  getMovieProviders: (params?: WatchProvidersGetMovieProvidersParams) => Promise<WatchProvidersGetMovieProvidersResponse>;\n  getTVProviders: (params?: WatchProvidersGetTVProvidersParams) => Promise<WatchProvidersGetTVProvidersResponse>;\n}\n\nexport interface V4IAccount {\n  getLists: (accountId: string, params?: V4AccountGetListsParams) => Promise<V4AccountGetListsResponse>;\n  getFavoriteMovies: (accountId: string, params?: V4AccountGetFavoriteMoviesParams) => Promise<V4AccountGetFavoriteMoviesResponse>;\n  getFavoriteTVShows: (accountId: string, params?: V4AccountGetFavoriteTVShowsParams) => Promise<V4AccountGetFavoriteTVShowsResponse>;\n  getMovieRecommendations: (accountId: string, params?: V4AccountGetMovieRecommendationsParams) => Promise<V4AccountGetMovieRecommendationsResponse>;\n  getTVShowRecommendations: (accountId: string, params?: V4AccountGetTVShowRecommendationsParams) => Promise<V4AccountGetTVShowRecommendationsResponse>;\n  getMovieWatchlist: (accountId: string, params?: V4AccountGetMovieWatchlistParams) => Promise<V4AccountGetMovieWatchlistResponse>;\n  getTVShowWatchlist: (accountId: string, params?: V4AccountGetTVShowWatchlistParams) => Promise<V4AccountGetTVShowWatchlistResponse>;\n  getRatedMovies: (accountId: string, params?: V4AccountGetRatedMoviesParams) => Promise<V4AccountGetRatedMoviesResponse>;\n  getRatedTVShows: (accountId: string, params?: V4AccountGetRatedTVShowsParams) => Promise<V4AccountGetRatedTVShowsResponse>;\n}\n\nexport interface V4IAuth {\n  createRequestToken: (body?: V4AuthCreateRequestTokenBody) => Promise<V4AuthCreateRequestTokenResponse>;\n  createAccessToken: (body: V4AuthCreateAccessTokenBody) => Promise<V4AuthCreateAccessTokenResponse>;\n  deleteAccessToken: (body: V4AuthDeleteAccessTokenBody) => Promise<V4AuthDeleteAccessTokenResponse>;\n}\n\nexport interface V4IList {\n  getList: (params?: V4ListGetListParams, listId?: string) => Promise<V4ListGetListResponse>;\n  createList: (body: V4ListCreateListBody) => Promise<V4ListCreateListResponse>;\n  updateList: (body: V4ListUpdateListBody, listId?: string) => Promise<V4ListUpdateListResponse>;\n  clearList: (listId?: string) => Promise<V4ListClearListResponse>;\n  deleteList: (listId?: string) => Promise<V4ListDeleteListResponse>;\n  addItems: (body: V4ListAddItemsBody, listId?: string) => Promise<V4ListAddItemsResponse>;\n  updateItems: (body: V4ListUpdateItemsBody, listId?: string) => Promise<V4ListUpdateItemsResponse>;\n  removeItems: (body: V4ListRemoveItemsBody, listId?: string) => Promise<V4ListRemoveItemsResponse>;\n  checkItemStatus: (params: V4ListCheckItemStatusParams, listId?: string) => Promise<V4ListCheckItemStatusResponse>;\n}\n\nexport interface ITMDBAPI {\n  v3: {\n    account: IAccount;\n    authentication: IAuthentication;\n    certifications: ICertifications;\n    changes: IChanges;\n    collections: ICollections;\n    companies: ICompanies;\n    configuration: IConfiguration;\n    credits: ICredits;\n    discover: IDiscover;\n    find: IFind;\n    genres: IGenres;\n    guestSessions: IGuestSessions;\n    keywords: IKeywords;\n    lists: ILists;\n    movies: IMovies;\n    networks: INetworks;\n    trending: ITrending;\n    people: IPeople;\n    reviews: IReviews;\n    search: ISearch;\n    tv: ITV;\n    tvSeasons: ITVSeasons;\n    tvEpisodes: ITVEpisodes;\n    tvEpisodeGroups: ITVEpisodeGroups;\n    watchProviders: IWatchProviders;\n  };\n  v4: {\n    account: V4IAccount;\n    auth: V4IAuth;\n    list: V4IList;\n  };\n}\n\nexport interface Http {\n  get<TResponse>(url: string, accessToken?: string): Promise<TResponse>;\n  post<TResponse, TBody = undefined>(url: string, body?: TBody, accessToken?: string): Promise<TResponse>;\n  put<TResponse, TBody>(url: string, body: TBody, accessToken?: string): Promise<TResponse>;\n  delete<TResponse, TBody = undefined>(url: string, body?: TBody, accessToken?: string): Promise<TResponse>;\n}\n\nconst createV3Methods = (client: Http, apiKey: string, v3Url: string) => {\n  return {\n    account: createV3AccountMethods(client, apiKey, v3Url),\n    authentication: createV3AuthenticationMethods(client, apiKey, v3Url),\n    certifications: createV3CertificationsMethods(client, apiKey, v3Url),\n    changes: createV3ChangesMethods(client, apiKey, v3Url),\n    collections: createV3CollectionsMethods(client, apiKey, v3Url),\n    companies: createV3CompaniesMethods(client, apiKey, v3Url),\n    configuration: createV3ConfigurationMethods(client, apiKey, v3Url),\n    credits: createV3CreditsMethods(client, apiKey, v3Url),\n    discover: createV3DiscoverMethods(client, apiKey, v3Url),\n    find: createV3FindMethods(client, apiKey, v3Url),\n    genres: createV3GenresMethods(client, apiKey, v3Url),\n    guestSessions: createV3GuestSessionsMethods(client, apiKey, v3Url),\n    keywords: createV3KeywordsMethods(client, apiKey, v3Url),\n    lists: createV3ListsMethods(client, apiKey, v3Url),\n    movies: createV3MoviesMethods(client, apiKey, v3Url),\n    networks: createV3NetworksMethods(client, apiKey, v3Url),\n    trending: createV3TrendingMethods(client, apiKey, v3Url),\n    people: createV3PeopleMethods(client, apiKey, v3Url),\n    reviews: createV3ReviewsMethods(client, apiKey, v3Url),\n    search: createV3SearchMethods(client, apiKey, v3Url),\n    tv: createV3TvMethods(client, apiKey, v3Url),\n    tvSeasons: createV3TVSeasonsMethods(client, apiKey, v3Url),\n    tvEpisodes: createV3TVEpisodesMethods(client, apiKey, v3Url),\n    tvEpisodeGroups: createV3TVEpisodeGroupsMethods(client, apiKey, v3Url),\n    watchProviders: createV3WatchProvidersMethods(client, apiKey, v3Url),\n  };\n};\n\nconst createV4Methods = (client: Http, v4Url: string, accessToken?: string) => {\n  return {\n    account: createV4AccountMethods(client, v4Url, accessToken),\n    auth: createV4AuthMethods(client, v4Url, accessToken),\n    list: createV4ListMethods(client, v4Url, accessToken),\n  };\n};\n\nexport default class TMDBAPI implements ITMDBAPI {\n  private v3Url = \"https://api.themoviedb.org/3/\";\n  private v4Url = \"https://api.themoviedb.org/4/\";\n\n  v3: ITMDBAPI[\"v3\"];\n  v4: ITMDBAPI[\"v4\"];\n\n  private client: Http;\n  private apiKey: string;\n  private accessToken?: string;\n\n  setApiKey(apiKey: string) {\n    this.apiKey = apiKey;\n    this.v3 = createV3Methods(this.client, this.apiKey, this.v3Url);\n  }\n\n  setAccessToken(accessToken: string) {\n    this.accessToken = accessToken;\n    this.v4 = createV4Methods(this.client, this.v4Url, this.accessToken);\n  }\n\n  constructor(client: Http, apiKey: string, accessToken?: string) {\n    this.apiKey = apiKey;\n    this.accessToken = accessToken;\n\n    this.client = client;\n\n    this.v3 = createV3Methods(this.client, this.apiKey, this.v3Url);\n    this.v4 = createV4Methods(this.client, this.v4Url, this.accessToken);\n  }\n}\n\nexport * from \"./types\";\n"],"mappings":"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","names":["src_exports","__export","TMDBWebAPI","__toCommonJS","buildV3Url","apiKey","url","params","searchParams","key","value","buildV4Url","getAccountUrlWithId","account_id","formattedUrl","createV3AccountMethods","client","apiUrl","__async","accountId","body","createV3AuthenticationMethods","createV3CertificationsMethods","createV3ChangesMethods","createV3CollectionsMethods","collectionId","createV3CompaniesMethods","companyId","createV3ConfigurationMethods","createV3CreditsMethods","creditId","createV3DiscoverMethods","createV3FindMethods","externalId","createV3GenresMethods","createV3GuestSessionsMethods","guestSessionId","createV3KeywordsMethods","keywordId","createV3ListsMethods","listId","createV3MoviesMethods","movieId","createV3NetworksMethods","networkId","createV3PeopleMethods","personId","createV3ReviewsMethods","reviewId","createV3SearchMethods","createV3TrendingMethods","mediaType","timeWindow","createV3TvMethods","tvId","createV3TVEpisodeGroupsMethods","id","createV3TVEpisodesMethods","seasonNumber","episodeNumber","episodeId","createV3TVSeasonsMethods","seasonId","createV3WatchProvidersMethods","createV4Proxy","methods","accessToken","target","prop","receiver","origMethod","args","createV4AccountMethods","createV4AuthMethods","getListUrl","createV4ListMethods","createV3Methods","v3Url","createV4Methods","v4Url","TMDBAPI","client","url","accessToken","__async","res","__spreadValues","data","body","TMDBWebAPI","v","apiKey"]}